// Copyright (c) 2021, xphade
// SPDX-License-Identifier: MIT

import 'package:dart_euler/src/utilities.dart' show getDivisors;

/// Determines the first triangle number with more than [threshold] divisors.
///
/// This is the solution to Project Euler problem 12.
///
/// This function determines the first triangle number whose number of divisors
/// is greater than the given [threshold]. Triangle numbers are generated by
/// adding the natural numbers. For example, the 5th triangle number is `1 + 2 +
/// 3 + 4 + 5 = 15`. The function asserts that the given threshold is
/// non-negative.
///
/// Example:
/// ```dart
/// // 6th triangle number: 21 ==> 1, 3, 7, 21 (4)
/// // 7th triangle number: 28 ==> 1, 2, 4, 7, 14, 28 (6)
/// divisibleTriangleNumber(4) == 28 // First one with more than 4 divisors.
/// ```
int divisibleTriangleNumber(int threshold) {
  assert(!threshold.isNegative);

  var counter = 1;
  var triangleNumber = 0;
  var numberOfDivisors = 0;

  while (numberOfDivisors <= threshold) {
    triangleNumber += counter;
    counter++;
    numberOfDivisors = getDivisors(triangleNumber).length;
  }

  return triangleNumber;
}
